generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                      String   @id @default(cuid())
  email                   String   @unique
  passwordHash            String   @map("password_hash")
  firstName               String   @map("first_name")
  lastName                String   @map("last_name")
  phone                   String?
  avatarUrl               String?  @map("avatar_url")
  birthDate               DateTime? @map("birth_date")
  skinType                String?  @map("skin_type")
  beautyPoints            Int      @default(0) @map("beauty_points")
  totalInvestment         Float    @default(0) @map("total_investment")
  sessionsCompleted       Int      @default(0) @map("sessions_completed")
  vipStatus               Boolean  @default(false) @map("vip_status")
  preferredNotifications  String?  @map("preferred_notifications")
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")
  
  appointments            Appointment[]
  vipSubscriptions        VipSubscription[]
  invitations             Invitation[]
  passwordResetTokens     PasswordResetToken[] // ✨ AGREGADO
  
  @@map("users")
}

// ✨ NUEVO MODELO AGREGADO
model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("password_reset_tokens")
}

model Clinic {
  id                    String   @id @default(cuid())
  name                  String
  email                 String   @unique
  passwordHash          String   @map("password_hash")
  phone                 String
  address               String
  logoUrl               String?  @map("logo_url")
  brandColors           String?  @map("brand_colors")
  subscriptionPlan      String   @default("FREE") @map("subscription_plan")
  subscriptionExpiresAt DateTime? @map("subscription_expires_at")
  settings              String?
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  
  professionals         Professional[]
  treatments            Treatment[]
  appointments          Appointment[]
  
  @@map("clinics")
}

model Professional {
  id               String   @id @default(cuid())
  clinicId         String   @map("clinic_id")
  firstName        String   @map("first_name")
  lastName         String   @map("last_name")
  specialties      String
  avatarUrl        String?  @map("avatar_url")
  bio              String?
  rating           Float?   @default(5.0)
  availableHours   String?  @map("available_hours")
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  
  clinic           Clinic @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  appointments     Appointment[]
  
  @@map("professionals")
}

model Treatment {
  id               String   @id @default(cuid())
  clinicId         String   @map("clinic_id")
  name             String
  description      String
  durationMinutes  Int      @map("duration_minutes")
  price            Float
  category         String
  iconName         String   @map("icon_name")
  isVipExclusive   Boolean  @default(false) @map("is_vip_exclusive")
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  
  clinic           Clinic @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  appointments     Appointment[]
  
  @@map("treatments")
}

model Appointment {
  id                    String   @id @default(cuid())
  userId                String   @map("user_id")
  clinicId              String   @map("clinic_id")
  professionalId        String   @map("professional_id")
  treatmentId           String   @map("treatment_id")
  scheduledDate         DateTime @map("scheduled_date")
  scheduledTime         DateTime @map("scheduled_time")
  durationMinutes       Int      @map("duration_minutes")
  status                String   @default("PENDING")
  notes                 String?
  beautyPointsEarned    Int      @default(0) @map("beauty_points_earned")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  
  user                  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  clinic                Clinic       @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  professional          Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  treatment             Treatment    @relation(fields: [treatmentId], references: [id], onDelete: Cascade)
  
  @@map("appointments")
}

model VipSubscription {
  id                   String   @id @default(cuid())
  userId               String   @map("user_id")
  planType             String   @map("plan_type")
  price                Float
  status               String   @default("ACTIVE")
  stripeSubscriptionId String?  @map("stripe_subscription_id")
  startsAt             DateTime @map("starts_at")
  expiresAt            DateTime @map("expires_at")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  
  user                 User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("vip_subscriptions")
}

model Invitation {
  id            String   @id @default(cuid())
  inviterId     String   @map("inviter_id")
  inviteeEmail  String   @map("invitee_email")
  status        String   @default("PENDING")
  rewardPoints  Int      @default(50) @map("reward_points")
  createdAt     DateTime @default(now()) @map("created_at")
  acceptedAt    DateTime? @map("accepted_at")
  
  inviter       User @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  
  @@map("invitations")
}

model WellnessTip {
  id          String   @id @default(cuid())
  title       String
  content     String
  category    String
  iconName    String   @map("icon_name")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("wellness_tips")
}